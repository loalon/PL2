#define RESPUESTA 42;

struct NumerosPares {
	int dos;
	int cuatro;
	int seis;
	int ocho;
	int diez;
} 

struct NumerosImpares {
	int uno;
	int tres;
	int cinco;
	int siete;
	int nueve;
} 

struct Numeros {
	NumerosPares numPares;
	NumerosImpares numImpares;
} 

int acumuladorGlobal;
int varNivel0=789;

void imprimir(int a) {
	printi(a);
}

void imprimirVarios (int a, int b, int c, int d) {
	int tempo; 
	tempo = (d-c);
	printc("ejecutando imprimirVarios");
	printi(a);
	printi(b);
	printi(c);
	printi(d);
	printc("resta de numero4 y numero3 dentro de la funcion con var local");
	printi(tempo);
	
}
void prueba1() {
	printc("Prueba sin retorno");
}

void imprimirTestRecursivo (int veces) {
	if(veces==0) { /*nivel2*/
		printc("Este es el caso trivial. Veces deberia ser (0): ");
		printi(veces);
	} else { /*nivel 2*/
		printc("Este es el caso no trivial. Quedan tantas veces: ");
		printi(veces);
		imprimirTestRecursivo(veces-1);
	}	
}


int restar(int a, int b) {

	int c;
	c= a-b;
	return c;
}

void main() {

	struct Patatas {
		int barbacoa;
		int alioli;
		
	} 
	
	int resultado;
	int numero1=5;
	int numero2=10;
	int numero3=15;
	int numero4=200;
	int numero=888;
	int resul6;
	
	int varNivel1=555;

	Numeros nums, numes;
	nums.numPares.dos=2;
	nums.numPares.ocho=8;
	nums.numPares.seis=6;
	
	printc("TEST de structs");
	resul6 = restar(nums.numPares.ocho, nums.numPares.dos);

	printc("TEST recursivo");
	imprimirTestRecursivo(5);
	
	printc("TEST operaciones");
	if (resul6 == nums.numPares.seis){/*nivel2*/
		printc("TEST resul6 con structs");
		printc("el resultado debe ser 6: ");
		printi(resul6);
		printc("el contenido del struct tiene que ser 6: ");
		printi(nums.numPares.seis);
	
	} else { /*nivel2*/
		printc("ha fallado el test ");
	}
	printc("TEST ACUMULADOR GLOBAL");
	acumuladorGlobal=restar(numero, numero4);
	printi(acumuladorGlobal);
	
	printc("**************************************************");
	printc("TEST LLAMADA CON VARIOS PARAMETROS");
	printc("un mensaje de aviso de ejecucion");
	printc("debe imprimir 5, 10, 15 y 200: ");
	printc("y la resta de 200 y 15 -> 185");
	imprimirVarios(numero1, numero2, numero3, numero4);
	
	printc("**************************************************");
	
	printc("TEST LLAMADA FUNCION");
	printc("numero antes de la operacion debe valer 888: ");
	printi(numero);
	printc("la funcion debe imprimir el numero: ");
	imprimir(numero);
	
	printc("**************************************************");
	
	printc("TEST RESTAR, ASIGNACION, INVOCAR Y PASO POR VALOR");
	printc("numero3 antes de la operacion debe valer 15: ");
	printi(numero3); /*15*/
	printc("numero2 antes de la operacion debe valer 10: ");
	printi(numero2);/*10*/
	printc("resultado tras la operacion debe valer 5: ");
	resultado=restar(numero3, numero2);
	printi(resultado);/*5*/
	printc("numero3 despues de la operacion debe valer 15: ");
	printi(numero3); /*15*/
	printc("numero2 despues de la operacion debe valer 10: ");
	printi(numero2);/*10*/
	
	printc("**************************************************");

}